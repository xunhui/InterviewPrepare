一.JS引擎和浏览器引擎的执行机制
JavaScript引擎是单线程运行的,浏览器无论在什么时候都只且只有一个线程在运行JavaScript程序。

浏览器的内核是多线程的，它们在内核控制下相互配合以保持同步，一个浏览器至少实现三个常驻线程：
JavaScript引擎线程，GUI渲染线程，浏览器事件触发线程。

1.JavaScript引擎是基于事件驱动单线程执行的，JavaScript引擎一直等待着任务队列中任务的到来，然后加以处理，浏览器无论什么时候都只有一个JavaScript线程在运行JavaScript程序。
2.GUI渲染线程负责渲染浏览器界面，当界面需要重绘（Repaint）或由于某种操作引发回流(Reflow)时,该线程就会执行。但需要注意，GUI渲染线程与JavaScript引擎是互斥的，
当JavaScript引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到JavaScript引擎空闲时立即被执行。
3.事件触发线程，当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JavaScript引擎的处理。这些事件可来自JavaScript引擎当前执行的代码块如setTimeout、也可来自浏览器内核的其他线程如鼠标点击、Ajax异步请求等，
但由于JavaScript的单线程关系所有这些事件都得排队等待JavaScript引擎处理（当线程中没有执行任何同步代码的前提下才会执行异步代码）。

(1)所有的代码都要通过函数调用栈中调用执行。
(2)当遇到WebAPIs(如DOM ajax settimeout)的时候，会交给浏览器内核的其他模块进行处理。
(3)任务队列中存放的是回调函数。
(4)等到调用栈中的task执行完之后再回去执行任务队列之中的task。

二.JS实现异步的方法

前言：setTimeout和setTimeinterval是异步的，无论设置的时间间隔有多短甚至是0，这两个函数均会
等待后面的同步代码执行完毕之后(JS引擎空闲)再执行内部的异步代码。即在开始计时后，后续的同步代码都已开始执行。
故setTimeout(fn, n)并不能准确的在nms之后执行，而是大于等于n ms。
由于js引擎队列的各种状况，setTimeinterval(fn, n)两次定时器事件间隔一般小于等于n ms。

1.回调函数callback （即以参数的形式传入另一个函数的函数 js中万物皆对象）通过异步的setTimeout实现

2.事件监听

3.ES6 Promise
































