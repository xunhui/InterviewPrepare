一、闭包
1.闭包：函数和函数内部能访问到的变量总和（词法环境）/能读取其他函数内部局部变量的函数

2.闭包的作用：读取函数内部的变量；让变量始终保持在内存中

3.注意点、弊端：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，
在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。

二、JS作用域
JS只有全局作用域和局部作用域，于是用IIFE来实现类似块级作用域的效果

JS作用域链：js在访问一个变量时会优先在该作用域(访问时的那个作用域)内寻找是否声明过该变量，如果该变量已经存在，则直接使用它的值，
否则它会寻找该作用域的‘父作用域/上级作用域’，直到找到全局作用域为止。

三、变量提升
JS中函数声明和变量声明总是会被解释器"提升"到方法体的最顶部。
即可先使用后定义。

三、IIFE(立即执行函数表达式)
function() { ... }(); error 会判定为函数声明，无方法名报错
function foo() { ... }(); error 

正确写法：(function() { ... }()) /(function(){ /* code */ })(); 
括号和一些JS操作符可以消除函数表达式和函数声明的歧义

IIFE也是用于将一些局部变量保存在内存中，可以减少全局变量造成的空间污染，构造更多的私有变量。
















